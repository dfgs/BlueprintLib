// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;

namespace {{class.namespace}}
{
	// class definition
	/*
	{{class}}
	*/

	
    public partial class {{class.name}}Model : INotifyPropertyChanged
	{ 
		public event PropertyChangedEventHandler PropertyChanged;
		
		private {{class.name}} dataSource
		{
			get;
			set;
		}

		
		{{- for property in class.properties }}
		{{- if !(property.attributes | contains "System.Xml.Serialization.XmlIgnoreAttribute") }}
		public {{property.type_name}} {{property.name}}
		{
			get => dataSource.{{property.name}};
			set 
			{
				if (value==dataSource.{{property.name}}) return;
				{{property.type_name}} oldValue=dataSource.{{property.name}}; 
				dataSource.{{property.name}} = value; 
				OnPropertyChanged(nameof({{property.name}})); 
			}
		}
		{{- end }}
		{{- end }}
		

		
		public {{class.name}}Model({{class.name}} DataSource)
		{
			this.dataSource=DataSource;
		}
		
		
		protected virtual void OnPropertyChanged(string PropertyName)
		{
			if( PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
		}
		
		public override string ToString()
		{
			return dataSource.ToString();
		}
	}
}
